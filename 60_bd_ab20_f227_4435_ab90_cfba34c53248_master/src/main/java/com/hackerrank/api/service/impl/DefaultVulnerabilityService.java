package com.hackerrank.api.service.impl;


import com.hackerrank.api.exception.BadRequestException;
import com.hackerrank.api.exception.ElementNotFoundException;
import com.hackerrank.api.model.Vulnerability;
import com.hackerrank.api.repository.VulnerabilityRepository;
import com.hackerrank.api.service.VulnerabilityService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;


@Service
public class DefaultVulnerabilityService implements VulnerabilityService {
  private final VulnerabilityRepository vulnerabilityRepository;

  @Autowired
  DefaultVulnerabilityService(VulnerabilityRepository vulnerabilityRepository) {
    this.vulnerabilityRepository = vulnerabilityRepository;
  }

  @Override
  public List<Vulnerability> getAllVulnerability() {
    return vulnerabilityRepository.findAll();
  }


  @Override
  public Vulnerability createNewVulnerability(Vulnerability vulnerability) {
	 // Optional<Vulnerability> createNewVulnerability =vulnerabilityRepository.findById(Vulnerability.getById());
   /* if (vulnerability== null) {
      throw new BadRequestException("The ID must not be provided when creating a new Vulnerability");
    }*/

    return vulnerabilityRepository.save(vulnerability);
  }

  @Override
  public Vulnerability getVulnerabilityById(Long id) {
	  Optional<Vulnerability> getVal = vulnerabilityRepository.findById(id);
	  if(!getVal.isPresent()) {
		  throw new ElementNotFoundException("Hotel with ID not found");
	  }
    return getVal.get();
            
          
  }

  @Override
  public void deleteById(Long id) {
	  Optional<Vulnerability> getVal = vulnerabilityRepository.findById(id);
	  if(!getVal.isPresent()) {
		  throw new ElementNotFoundException("Hotel with ID not found");
	  }
    
    vulnerabilityRepository.delete(getVal.get());
  
  }

@Override
public List<Vulnerability> getProduct(String product) {
	
	List<Vulnerability> getVal = vulnerabilityRepository.findProduct(product);
	  if(getVal.isEmpty()) {
		  throw new BadRequestException("Hotel with ID BadRequestException");
	  }
   
	return (List<Vulnerability>) getVal.get(1);
}
}
